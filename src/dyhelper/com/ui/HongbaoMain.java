/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package dyhelper.com.ui;

import java.util.HashMap;
import java.util.List;

import com.facebook.rebound.SimpleSpringListener;
import com.facebook.rebound.Spring;
import com.facebook.rebound.SpringSystem;
import com.nineoldandroids.view.ViewHelper;

import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.util.Log;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.accessibility.AccessibilityManager;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.ScaleAnimation;
import android.view.animation.Transformation;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import dyhelper.com.util.DialogUtils;
import dyhelper.com.util.SQLManager;
import dyhelper.com.view.BitmapMeshLayout;
import dyhelper.com.view.SwitchButton;
import xyz.monkeytong.hongbao.R;

public class HongbaoMain extends Activity implements AccessibilityManager.AccessibilityStateChangeListener {
    private AccessibilityManager accessibilityManager;
    int activityOpenEnterAnimation;
    int activityOpenExitAnimation;
    private TextView beatTv;
    private float currentMaxValue;
    private ImageView infoOperatingIV;
    private ImageView iv_back;
    private final SpringSystem mSpringSystem = SpringSystem.create();
    private Drawable newZoomedStart;
    private Drawable newZoomedStop;
    private ImageView outCircleView;
    private TextView recordTv;
    private BitmapMeshLayout sampleView;
    private Animation scaleAnimation;
    private Toast seeToast;
    private TextView settingTv;
    private Spring springDown;
    private Spring springDown2;
    private Button startButton;
    private SwitchButton switchButton;
    private TextView totalMoneyTv;
    private TextView totalTimeTv;
    private ImageButton useIb;
    private VelocityTracker vTracker;
    private ViewConfiguration viewFig;
    public static boolean pause = true;
    
    public void onDestroy() {
        accessibilityManager.removeAccessibilityStateChangeListener(this);
        if(mSpringSystem != null) {
            List<Spring> springs = mSpringSystem.getAllSprings();
            if((springs != null) && (!springs.isEmpty())) {
                if(!springs.iterator().hasNext()) {
                }
                Spring s = (Spring)springs.iterator().next();
                s.removeAllListeners();
            }
            mSpringSystem.removeAllListeners();
        }
        if(vTracker != null) {
            vTracker.clear();
            vTracker.recycle();
            vTracker = null;
        }
        sampleView = null;
        System.gc();
        super.onDestroy();
    }
    
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hong_bao);
        int[] activityAniValues = Main.obtrainOpenAnims(this);
        activityOpenEnterAnimation = activityAniValues[0x0];
        activityOpenExitAnimation = activityAniValues[0x1];
        viewFig = ViewConfiguration.get(this);
        newZoomedStart = zoom(R.drawable.hongbao_boot, 1.8f, 1.8f);
        newZoomedStop = zoom(R.drawable.hongbao_stop, 1.8f, 1.8f);
        initViews();
        initAnimations();
    }
    
    private SimpleSpringListener simpleSpringListener = new SimpleSpringListener()
    {
      public void onSpringUpdate(Spring paramAnonymousSpring)
      {
        ViewHelper.setPivotX(HongbaoMain.this.startButton, 0.5F * HongbaoMain.this.startButton.getWidth());
        ViewHelper.setPivotY(HongbaoMain.this.startButton, 0.5F * HongbaoMain.this.startButton.getHeight());
        ViewHelper.setScaleY(HongbaoMain.this.startButton, (float)(1.0D - paramAnonymousSpring.getCurrentValue() * HongbaoMain.this.currentMaxValue));
        ViewHelper.setScaleX(HongbaoMain.this.startButton, (float)(1.0D - paramAnonymousSpring.getCurrentValue() * HongbaoMain.this.currentMaxValue));
      }
    };
    private SimpleSpringListener simpleSpringListener_first = new SimpleSpringListener()
    {
      public void onSpringUpdate(Spring paramAnonymousSpring)
      {
        ViewHelper.setPivotX(HongbaoMain.this.startButton, 0.5F * HongbaoMain.this.startButton.getWidth());
        ViewHelper.setPivotY(HongbaoMain.this.startButton, 0.0F);
        ViewHelper.setRotationX(HongbaoMain.this.startButton, 120.0F * (float)paramAnonymousSpring.getCurrentValue());
      }
    };
    
    private void initAnimations() {
        springDown = mSpringSystem.createSpring();
        /*startButton.setOnTouchListener(new View.OnTouchListener() {
            private float mFriction = 7.0f;
            private int mLastDownX;
            private int mLastDownY;
            private float mLastRadius = 1.0f - currentMaxValue;
            private float mTension;
            
            private void handeAnimation(MotionEvent event) {
                if(springDown2.getCurrentValue() != 0.0f) {
                    return;
                }
                switch(event.getAction()) {
                    case 0:
                    {
                        springDown.removeAllListeners();
                        springDown.addListener(simpleSpringListener);
                        springDown.setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(400f, mFriction));
                        springDown.setCurrentValue(0.0);
                        springDown.setEndValue(1.0);
                        Log.i("INFO", "down");
                        mLastDownX = (int)event.getX();
                        mLastDownY = (int)event.getY();
                        if(vTracker == null) {
                            vTracker = VelocityTracker.obtain();
                        } else {
                            vTracker.clear();
                        }
                        vTracker.addMovement(event);
                        return;
                    }
                    case 2:
                    {
                        Log.i("INFO", "move");
                        vTracker.addMovement(event);
                        vTracker.computeCurrentVelocity(0x3e8, (float)viewFig.getScaledMaximumFlingVelocity());
                        float xV = vTracker.getXVelocity();
                        float yV = vTracker.getYVelocity();
                        float x_y_V = (float)Math.sqrt((double)((xV * xV) + (yV * yV)));
                        int x = (int)event.getX();
                        int y = (int)event.getY();
                        int lastDistance = (int)Math.sqrt(Math.pow((double)(x - mLastDownX), 2) + Math.pow((double)(y - mLastDownY), 2));
                        int stardDis = (int)Math.sqrt(Math.pow((double)(startButton.getWidth() * 1.5f), 2) + Math.pow((double)(startButton.getHeight() * 1.5f), 2));
                        float radius = ((float)lastDistance * 1.0f) / (float)stardDis;
                        mFriction = (7.0f - (5.0f * radius));
                        mTension = (400.0f + (100.0f * radius));
                        if(radius > 1.0f) {
                            radius = 1.0f;
                        }
                        if((lastDistance > viewFig.getScaledTouchSlop()) && (x_y_V >= (float)viewFig.getScaledMinimumFlingVelocity())) {
                            springDown.removeAllListeners();
                            mLastRadius = ((1.0f - currentMaxValue) + (currentMaxValue * radius));
                            ViewHelper.setPivotX(startButton, ((float)startButton.getWidth() * 0.5f));
                            ViewHelper.setPivotY(startButton, ((float)startButton.getHeight() * 0.5f));
                            ViewHelper.setScaleY(startButton, mLastRadius);
                            ViewHelper.setScaleX(startButton, mLastRadius);
                        }
                        return;
                    }
                    case 1:
                    case 3:
                    {
                        vTracker.addMovement(event);
                        vTracker.computeCurrentVelocity(0x3e8, (float)viewFig.getScaledMaximumFlingVelocity());
                        Log.i("INFO", "up");
                        springDown.removeAllListeners();
                        springDown.addListener(simpleSpringListener);
                        springDown.setSpringConfig(SpringConfig.fromOrigamiTensionAndFriction(mTension, mFriction));
                        springDown.setCurrentValue((double)((1.0f - mLastRadius) / currentMaxValue));
                        springDown.setEndValue(0.0);
                        break;
                    }
                }
            }
            
            public boolean onTouch(View v, MotionEvent event) {
                handeAnimation(event);
                return false;
            }

			
        });*/
    }
    
    private void showOutCircleAnim() {
        if(scaleAnimation != null) {
            scaleAnimation.cancel();
            outCircleView.clearAnimation();
        }
        HongbaoMain.MyScaleAnimation scaleAnimation = new HongbaoMain.MyScaleAnimation(this, outCircleView, 0.8f, 1.4f, 0.8f, 1.4f, ((float)outCircleView.getWidth() * 0.5f), ((float)outCircleView.getHeight() * 0.5f));
        scaleAnimation.setAnimationListener(new Animation.AnimationListener() {
            
            public void onAnimationStart(Animation animation) {
            }
            
            public void onAnimationRepeat(Animation animation) {
            }
            
            public void onAnimationEnd(Animation animation) {
                ViewHelper.setAlpha(outCircleView, 1.0f);
            }
        });
        scaleAnimation.setDuration(0x258);
        scaleAnimation.setInterpolator(new AccelerateDecelerateInterpolator());
        scaleAnimation.setRepeatCount(-0x1);
        scaleAnimation.setFillAfter(false);
        outCircleView.startAnimation(scaleAnimation);
    }
    
    class MyScaleAnimation extends ScaleAnimation {
        private View view;
        
        public MyScaleAnimation(HongbaoMain p1, View view, float fromX, float toX, float fromY, float toY, float pivotX, float pivotY) {
            super(fromX, toX, fromY, toY, pivotX, pivotY);
            this.view = view;
        }
        
        protected void applyTransformation(float interpolatedTime, Transformation t) {
            super.applyTransformation(interpolatedTime, t);
            float currentValue = getInterpolator().getInterpolation(interpolatedTime);
            if(currentValue <= 0) {
                currentValue = 1.0f;
            }
            ViewHelper.setAlpha(view, (1.0f - currentValue));
        }
    }
    
    private void cancelOutCircleAnim() {
        if(scaleAnimation != null) {
            scaleAnimation.cancel();
            scaleAnimation = null;
        }
        outCircleView.clearAnimation();
    }
    
    public void initViews() {
        sampleView = (BitmapMeshLayout)findViewById(R.id.id_meshlay);
        totalTimeTv = (TextView)findViewById(R.id.qianghongbao_total_times);
        totalMoneyTv = (TextView)findViewById(R.id.qianghongbao_total_money);
        beatTv = (TextView)findViewById(R.id.beat);
        useIb = (ImageButton)findViewById(R.id.id_how_to_use);
        switchButton = (SwitchButton)findViewById(R.id.id_autoOnOff);
        iv_back = (ImageView)findViewById(R.id.id_back);
        recordTv = (TextView)findViewById(R.id.id_record);
        settingTv = (TextView)findViewById(R.id.id_setting);
        outCircleView = (ImageView)findViewById(R.id.id_boot_circle);
        iv_back.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                finish();
            }
        });
        settingTv.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                startActivity(new Intent(HongbaoMain.this, SettingsActivity.class));
                if(Build.VERSION.SDK_INT > 0x13) {
                    overridePendingTransition(activityOpenEnterAnimation, activityOpenExitAnimation);
                }
            }
        });
        recordTv.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                startActivity(new Intent(HongbaoMain.this, HongbaoHistoryActivity.class));
            }
        });
        useIb.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                Dialog dialog = DialogUtils.getDialog_n_a_j(HongbaoMain.this);
                dialog.show();
            }
        });
        startButton = (Button)findViewById(R.id.start_button);
        springDown2 = mSpringSystem.createSpring();
        startButton.setOnClickListener(new View.OnClickListener() {
            
            public void onClick(View v) {
                if(HongbaoMain.this.isServiceEnabled()) {
                    HongbaoMain.pause = !pause;
                    if(HongbaoMain.pause) {
                    	sampleView.stop();
                    	cancelOutCircleAnim();
                        setBackImage(v, HongbaoMain.this.newZoomedStart);
                    } else {
                    	sampleView.run();
                    	showOutCircleAnim();
                        setBackImage(v, HongbaoMain.this.newZoomedStop);
                    }
                    return;
                }
                try {
                    Intent accessibleIntent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
                    startActivityForResult(accessibleIntent, 0x1);
                    return;
                } catch(Exception e) {
                	Toast.makeText(HongbaoMain.this,
							"遇到一些问题,请手动打开系统设置>无障碍服务>微信红包(ฅ´ω`ฅ)",
							Toast.LENGTH_LONG).show();
					e.printStackTrace();
                }
            }
        });
        switchButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            private String message = "\u5df2\u5f00\u542f\u81ea\u52a8\u62a2\u529f\u80fd";
            
            
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(HongbaoMain.this);
                sp.edit().putBoolean("pref_watch_chat", isChecked).commit();
                if(isChecked) {
                    message = "\u5df2\u5f00\u542f\u81ea\u52a8\u62c6\u529f\u80fd";
                } else {
                    message = "\u5df2\u5173\u95ed\u81ea\u52a8\u62c6\u529f\u80fd";
                }
                if(seeToast == null) {
                    seeToast = Toast.makeText(HongbaoMain.this, message, 1);
                } else {
                    seeToast.setText(message);
                }
                seeToast.show();
            }
        });
        handleMaterialStatusBar();
        explicitlyLoadPreferences();
        accessibilityManager = (AccessibilityManager)getSystemService("accessibility");
        accessibilityManager.addAccessibilityStateChangeListener(this);
        updateServiceStatus();
    }
    
    private void setBackImage(View view, Drawable drawable) {
        if(Build.VERSION.SDK_INT >= 0x10) {
            view.setBackground(drawable);
            return;
        }
        view.setBackgroundDrawable(drawable);
    }
    
    private void adjustAnimation() {
        if((springDown2 != null) && (springDown2.getCurrentValue() == 1.0)) {
            startButton.post(new Runnable() {
                
                public void run() {
                    // :( Parsing error. Please contact me.
                }
            });
        }
    }
    
    protected void onStart() {
        super.onStart();
        boolean isAutoOn = PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_watch_chat", true);
        if(isAutoOn != switchButton.isChecked()) {
            switchButton.toggleImmediatelyNoEvent();
        }
    }
    
    protected void onStop() {
        super.onStop();
        if(sampleView != null) {
            sampleView.stop();
        }
        cancelOutCircleAnim();
    }
    
    private Drawable zoom(int pictureId, float scaleWidth, float scaleHeight) {
    	/*
		 * 将图片读取到不bmp中
		 */
		// Resources res = getResources();
		// Bitmap bmp = BitmapFactory.decodeResource(res, pictureId);

		ApplicationInfo appInfo = this.getApplicationInfo();
		Bitmap bmp = BitmapFactory.decodeResource(getResources(), pictureId);

		/*
		 * 缩小
		 */
		Matrix matrix = new Matrix();
		matrix.postScale(scaleWidth, scaleHeight);
		int width = (int) (bmp.getWidth() * scaleWidth);
		int height = (int) (bmp.getHeight() * scaleHeight);
		Bitmap newbmp = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(),
				bmp.getHeight(), matrix, true);
		// Bitmap newbmp = Bitmap.createBitmap(bmp, 0, 0, width, height, matrix,
		// true);
		/*
		 * 转换成Drawable
		 */
		Drawable drawable = new BitmapDrawable(newbmp);
		return drawable;
    }
    
    private void explicitlyLoadPreferences() {
    	PreferenceManager.setDefaultValues(this,
				R.xml.general_preferences, false);
    }
    
    private void handleMaterialStatusBar() {
        if(Build.VERSION.SDK_INT < 0x15) {
            return;
        }
        /*Window window = getWindow();
        window.clearFlags(0x4000000);
        window.addFlags(0x80000000);
        window.setStatusBarColor(-0x1b939e);*/
    }
    
    private void updateServiceStatus() {
        if(startButton == null) {
            return;
        }
        if(!pause) {
            setBackImage(startButton, newZoomedStop);
            return;
        }
        setBackImage(startButton, newZoomedStart);
    }
    
    private boolean isServiceEnabled() {
    	List<AccessibilityServiceInfo> accessibilityServices = accessibilityManager
				.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_GENERIC);
		for (AccessibilityServiceInfo info : accessibilityServices) {
			Log.i("chaochao", "---->" + info.getId());
			if (info.getId().equals(getPackageName() +
					     "/dyhelper.com.services.HongbaoService")) {
				return true;
			}
		}
		return false;
    }
    
    public void openGitHub(View view) {
        Intent webViewIntent = new Intent(this, WebViewActivity.class);
        webViewIntent.putExtra("title", "\u6269\u5c55\u9875\u9762");
        webViewIntent.putExtra("url", "https://www.baidu.com");
        startActivity(webViewIntent);
    }
    
    public void openUber(View view) {
        Intent webViewIntent = new Intent(this, WebViewActivity.class);
        webViewIntent.putExtra("title", "\u6269\u5c55\u9875\u9762");
        webViewIntent.putExtra("url", "https://www.baidu.com");
        startActivity(webViewIntent);
    }
    
    public void openSettings(View view) {
    	Intent settingsIntent = new Intent(this,
				HongbaoHistoryActivity.class);
		settingsIntent.putExtra("title", "红包记录");
		settingsIntent.putExtra("frag_id", "GeneralSettingsFragment");
		startActivity(settingsIntent);
    }
    
    public void onAccessibilityStateChanged(boolean enabled) {
        updateServiceStatus();
    }
    
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(requestCode == 0x1) {
            pause = isServiceEnabled() ? false : true;
            if(!pause) {
                sampleView.run();
                showOutCircleAnim();
            }
        }
        super.onActivityResult(requestCode, resultCode, data);
    }
    
    public void onResume() {
        super.onResume();
        Log.i("sort", "onResume");
        if(!isServiceEnabled()) {
            pause = true;
        }
        
        Log.i("sort", "pause:" + pause);
        
        try {
            updateServiceStatus();
            updateTotalData();
        } catch(Exception e) {
            e.printStackTrace();
        }
        if(pause) {
            setBackImage(startButton, newZoomedStart);
            sampleView.post(new Runnable() {
                
                public void run() {
                    sampleView.stop();
                    cancelOutCircleAnim();
                }
            });
            return;
        }
        setBackImage(startButton, newZoomedStop);
        sampleView.post(new Runnable() {
            public void run() {
                sampleView.run();
                showOutCircleAnim();
            }
        });
    }
    
    private void updateTotalData() {
    	List<HashMap<String, String>> originList = SQLManager.getInstance(
				this).queryData("record");
		int totalTimes = originList.size();
		int fen = 0;
		for (HashMap<String, String> originMap : originList) {
			String amount = originMap.get("amount");
			amount = amount.replace(".", "");
			int amountFen = Integer.valueOf(amount);
			fen = fen + amountFen;
		}
		totalTimeTv.setText(totalTimes + "");
		float yuan = (float) (fen / 100.00);
		totalMoneyTv.setText(yuan + "");
		int beat = (int) (101 - (3000 / (yuan + 30)));
		if (beat == 100) {
			beat = 99;
		}
		if (fen == 0) {
			beat = 0;
		}
		beatTv.setText("您已击败：全国" + beat + "%的用户");
    }
}
