/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package dyhelper.com.view;

import android.widget.ImageView;
import android.graphics.Bitmap;
import android.graphics.Paint;
import android.graphics.PorterDuffXfermode;
import android.graphics.RectF;
import android.graphics.Rect;
import android.content.Context;
import android.util.AttributeSet;
import android.graphics.PorterDuff;
import android.graphics.Color;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.graphics.Canvas;
import android.graphics.Xfermode;
import android.graphics.drawable.Drawable;
import cn.dianyou.utils.BitmapUtils;
import android.util.Log;
import android.view.MotionEvent;

public class CircleImageView extends ImageView {
    private Bitmap destBmp;
    private int height;
    private float mDensity;
    private Paint paint;
    private Bitmap srcBmp;
    private int width;
    
    public CircleImageView(Context context) {
        this(context, null);
    }
    
    public CircleImageView(Context context, AttributeSet attrs) {
        this(context, attrs, 0x0);
    }
    
    public CircleImageView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        obtainInfo(context, attrs);
        initPaint();
        initValue();
    }
    
    private void initValue() {
        mOutWrapSize = (int)((float)mOutWrapSize * mDensity);
    }
    
    private void initPaint() {
        paint = new Paint();
        paint.setAntiAlias(true);
        paint.setDither(true);
        paint.setStyle(Paint.Style.FILL);
    }
    
    private void obtainInfo(Context context, AttributeSet attrs) {
        mDensity = context.getResources().getDisplayMetrics().density;
    }
    
    protected void onFinishInflate() {
        super.onFinishInflate();
    }
    private Rect srcRealRect = new Rect();
    private Rect srcScaleRect = new Rect();
    private RectF rect = new RectF();
    private final PorterDuffXfermode pdfMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);
    private int mOutWrapSize = 0x2;
    private int mOutWrapColor = Color.parseColor("#3fe6b0");
    private int mBackColor = Color.parseColor("#bcbcbc");
    private int mFadeBackColor = Color.parseColor("#bb666666");
    private boolean isDown = false;
    
    public boolean onTouchEvent(MotionEvent event) {
        boolean isConsume = super.onTouchEvent(event);
        if(isConsume) {
            switch(event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                {
                    if(rect.contains(event.getX(), event.getY())) {
                        isDown = true;
                        invalidate();
                    }
                }
                return isConsume;
            
	            case MotionEvent.ACTION_MOVE:
	            {
	                if((isConsume) && (rect.contains(event.getX(), event.getY())) && (!isDown)) {
	                    isDown = true;
	                    invalidate();
	                }
	                if((!rect.contains(event.getX(), event.getY())) && (isDown)) {
	                    isDown = false;
	                    invalidate();
	                }
	                return isConsume;
	            }
	            case MotionEvent.ACTION_UP:
	            {
	                isDown = false;
	                invalidate();
	                break;
	            }
            }
        }
        return isConsume;
    }
    
    public void setImageBitmap(Bitmap bm) {
        super.setImageBitmap(bm);
        srcBmp = bm;
    }
    
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        width = w;
        height = h;
        if(srcBmp == null) {
            Drawable srcDrawable = getDrawable();
            if(srcDrawable != null) {
                srcBmp = BitmapUtils.drawableToBitmap(srcDrawable);
            }
        }
        Log.i("INFO", "onSizeChanged..");
        if(srcBmp != null) {
            srcRealRect = new Rect(0x0, 0x0, srcBmp.getWidth(), srcBmp.getHeight());
        }
        srcScaleRect = new Rect(mOutWrapSize, mOutWrapSize, (w - mOutWrapSize), (h - mOutWrapSize));
        destBmp = Bitmap.createBitmap((srcScaleRect.right - srcScaleRect.left), (srcScaleRect.bottom - srcScaleRect.top), Bitmap.Config.ARGB_8888);
        Canvas c = new Canvas(destBmp);
        paint.setColor(mOutWrapColor);
        c.drawCircle(((float)destBmp.getWidth() / 2.0f), ((float)destBmp.getHeight() / 2.0f), ((float)destBmp.getHeight() / 2.0f), paint);
        rect = new RectF(0.0f, 0.0f, (float)width, (float)height);
    }
    
    protected void onDraw(Canvas canvas) {
        float centerX = (float)width / 2.0f;
        float centerY = (float)height / 2.0f;
        float r = Math.min(centerX, centerY);
        paint.setColor(mOutWrapColor);
        canvas.drawCircle(centerX, centerY, r, paint);
        if(isDown) {
            paint.setColor(mFadeBackColor);
        } else {
            paint.setColor(mBackColor);
        }
        canvas.drawCircle((float)srcScaleRect.centerX(), (float)srcScaleRect.centerY(), ((float)destBmp.getHeight() / 2.0f), paint);
        int saveCount = canvas.saveLayer(0.0f, 0.0f, (float)getWidth(), (float)getHeight(), paint, Canvas.ALL_SAVE_FLAG);
        canvas.drawBitmap(destBmp, (float)mOutWrapSize, (float)mOutWrapSize, paint);
        if(srcBmp != null) {
            paint.setXfermode(pdfMode);
            canvas.drawBitmap(srcBmp, srcRealRect, srcScaleRect, paint);
            canvas.restoreToCount(saveCount);
            paint.setXfermode(null);
        }
    }
}
