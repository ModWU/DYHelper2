/**
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package dyhelper.com.weather;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;
import cn.dianyou.nets.DYHttpUtils;
import okhttp3.Response;

public class BaiduWeather {
    private String city;
    private Context context;
    private String xml;
    private List<perWeather> wlist = new ArrayList<perWeather>();
    private static String Apikey = "596aa9d11c70cece5d62c1e3e3794674";
    
    BaiduWeather(String city, Context context) {
        this.context = context;
        this.city = city;
    }
    
    public List getWeather() {
    	String buffstr = null;
        try {
        	
        	Log.i("event123", "getWeather->city: " + city);
            xml = getXmlCode(city);  //设置输入城市
            Log.i("event123", "getWeather->xml: " + xml);
            if(xml.equals("无数据"))
            {
                readXMLfromLocal();
            }
            else
            {
                saveXMLtoLocal();
            }
            readStringXml(xml);//调用xml解析函数
            //return wlist;

        } catch (Exception e) {
        	Log.i("event123", "getWeather->e: " + e.toString());
            e.printStackTrace();
            return wlist;
        }
        return wlist;
    }
    
    private String getXmlCode(String city) {
        Log.i("INFO", "getXmlCode");
        try {
            city = URLEncoder.encode(city, "UTF-8");
        } catch(UnsupportedEncodingException e) {
            Log.i("INFO", e.toString());
            e.printStackTrace();
        }
        String requestUrl = "http://api.map.baidu.com/telematics/v3/weather?location=" + city + "&ak=" + Apikey;
        String XMLcode = null;
        Log.i("INFO", "getXmlCode2");
        try {
            Response response = DYHttpUtils.getInstance().get().url(requestUrl).build().execute();
            if(response.isSuccessful()) {
                XMLcode = response.body().string();
                Log.i("INFO", "getXmlCode3");
            } else {
                Log.i("INFO", "getXmlCode4");
            }
        } catch(IOException e) {
            Log.i("INFO", e.toString());
        }
        Log.i("INFO", XMLcode);
        return XMLcode;
    }
    
    private boolean readStringXml(String xml) {

        Document doc = null;
        List listdate=null;  //用来存放日期
        List listweather=null;
        List listwind=null;
        List listtem=null;

        try {
            // 读取并解析XML文档
            //下面的是通过解析xml字符串的

            doc = DocumentHelper.parseText(xml); // 将字符串转为XML
            Element rootElt = doc.getRootElement(); // 获取根节点
            Iterator iter = rootElt.elementIterator("results"); // 获取根节点下的子节点results
            String status=rootElt.elementText("status"); //获取状态，如果等于success,表示有数据
            if(!status.equals("success"))
                return false;  //如果不存在数据，直接返回
            String date= rootElt.elementText("date");  //获取根节点下的，当天日期
            //遍历results节点
            while (iter.hasNext()) {
                Element recordEle = (Element) iter.next();
                Iterator iters = recordEle.elementIterator("weather_data"); //
                //遍历results节点下的weather_data节点
                while (iters.hasNext()) {
                    Element itemEle = (Element) iters.next();
                    listdate=itemEle.elements("date");
                    listweather=itemEle.elements("weather");
                    listwind=itemEle.elements("wind");
                    listtem=itemEle.elements("temperature");
                }

                wlist.clear();
                for(int i=0;i<listdate.size();i++){  //由于每一个list.size都相等，这里统一处理
                    Element eledate=(Element)listdate.get(i); //依次取出date
                    Element eleweather=(Element)listweather.get(i);
                    Element elewind=(Element)listwind.get(i);
                    Element eletem=(Element)listtem.get(i);
                    perWeather pw = new perWeather(eledate.getText(),eleweather.getText(),elewind.getText(),eletem.getText());
                    wlist.add(pw);
                }
            }
        } catch (DocumentException e) {
            e.printStackTrace();
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;

    }
    
    public  void saveXMLtoLocal()//保存单个地点的天气数据
    {
        SharedPreferences share = context.getSharedPreferences("datafju", Activity.MODE_PRIVATE);
        SharedPreferences.Editor edit = share.edit();
        edit.putString(city, xml);
        edit.commit();
    }
    public void readXMLfromLocal()
    {
        SharedPreferences share = context.getSharedPreferences("datafju", Activity.MODE_PRIVATE);
        String s = share.getString(city, "无数据").toString();
        xml=s;
    }


    public void setCity(String city)
    {
        this.city=city;
    }
    public String getCity()
    {
        return city;
    }
}
